// Generated by IcedCoffeeScript 108.0.12
(function () {

    var selections;

    if (window == null) {
        window = {};
    }

    window.commaFormatter = function (value) {
        return value != null ? value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : void 0;
    };

    window.yesNoFormatter = function (value) {
        if (value === true) {
            return "بله";
        } else {
            return "خیر";
        }
    };

    window.$table = $('table[data-toggle=table]');

    selections = [];

    window.getIdSelections = function () {
        var idField, tableOptions;
        tableOptions = window.$table.bootstrapTable('getOptions');
        idField = tableOptions.idField;
        return $.map(window.$table.bootstrapTable('getSelections'), function (row) {

            return row[idField];
        });
    };

    $(document).on("click", "button.export-chart", function () {
        var $this, canvas, compositeOperation, ctx;
        $this = $(this);
        canvas = document.getElementById($this.next("canvas").attr("id"));
        ctx = canvas.getContext("2d");
        compositeOperation = ctx.globalCompositeOperation;
        ctx.globalCompositeOperation = "destination-over";
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.globalCompositeOperation = compositeOperation;
        canvas.toBlob(function (blob) {
            var a;
            a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";
            a.href = window.URL.createObjectURL(blob);
            a.download = "chart-" + (new Date().getTime()) + ".jpg";
            a.click();
            window.URL.revokeObjectURL(a.href);
            a.remove();
        }, "image/jpeg", 1);
    });

    $(document).on("click", "#toolbar .refreshChart[data-url]", function () {
        var $refreshItem, functionName;
        $refreshItem = $(this);
        functionName = $refreshItem.data("url");
        window["window"][functionName]()

    });

    $(document).on("click", "#toolbar .refreshList", function () {
        $('table[data-toggle=table]').bootstrapTable("refresh", {
            silent: true,
            pageNumber: 1
        });
    });

    $(document).on("click", ".btn.createItem[data-url]", function (e) {
        var $createItem, additionalParams, content, params, url, _ref;
        e.preventDefault();
        $createItem = $(this);
        $.fn.dialog.defaults = $.extend({}, $.fn.dialog.defaults, {
            saveBtnLabel: resource.dialog.save,
            cancelBtnLabel: resource.dialog.cancel,
            closeLabel: resource.dialog.close
        });

        content = "";
        $createItem.tooltip("hide");
        url = $createItem.data("url");
        additionalParams = window.$table.data("additionalParams");
        if (additionalParams != null) {
            params = $.extend({}, window.execFunc(additionalParams, window), params);
        }
        if ((params != null) && _.isArray(params)) {
            _.each(params, function (item) {
                _.each(_.keys(item), function (key) {
                    url = window.addQueryStringParm(url, key, item[key]);
                });
            });
        } else if ((params != null) && _.isObject(params)) {
            _.each(_.keys(params), function (key) {
                url = window.addQueryStringParm(url, key, params[key]);
            });
        }
        $.ajax({
            url: url,
            type: "GET",
            cache: false
        }).done(function (data, textStatus, jqXHR) {

            var _ref1;
            if ((data != null ? data.length : void 0) === 0) {
                toastr["error"]((_ref1 = data.message) != null ? _ref1 : resource.exception.addError);
                return;
            }
            setTimeout(function () {
                var name, title, _ref1, _ref2, imageFiles;
                if ($createItem.hasClass("btn-shortcut")) {
                    title = "افزودن " + $createItem.closest(".form-group").find("label.control-label").text();
                } else {
                    name = new Date().getTime();
                    title = $("<div class='t" + name + "'/>").html($createItem.html());
                    $("body").append(title);
                    $(".t" + name + " .material-icons, .t" + name + " .glyphicon").remove();
                    title = title.text().trim() + " " + window.document.title.replace("لیست ", "");
                    $(".t" + name).remove();
                }
                $createItem.dialog({
                    title: (_ref1 = $createItem.data("dialogTitle")) != null && _ref1 != "undefined" ? _ref1 : title,
                    mode: (_ref2 = $createItem.data("dialogMode")) != null ? _ref2 : "large",
                    destroyAfterClose: true,
                    content: content,
                    onSaveClick: function (e) {
                        var $btnSave, form;
                        $btnSave = $(e);
                        form = $btnSave.parent().prev().find("form");
                        if (form.valid()) {
                            $btnSave.prop("disabled", true);
                            $.ajax({
                                url: form.attr("action"),
                                method: "POST",
                                data: new FormData(form.get(0)),
                                processData: false,
                                contentType: false,
                                cache: false
                            }).done(function (data, textStatus, jqXHR) {

                                var _ref3;
                                autoDestroyToastr();
                                if (data.resultStatus !== 1) {
                                    toastr["error"]((_ref3 = data.message) != null ? _ref3 : resource.exception.saveError);
                                    return;
                                }
                                toastr["success"](resource.message.saveSuccess);
                                $createItem.data("dialog").hide($createItem.data("dialogId"));
                                window.$table.bootstrapTable("refresh", {
                                    silent: true,
                                    pageNumber: 1
                                });
                            }).fail(function (msg) {
                                autoDestroyToastr();
                                content = msg.status === 403 ? msg.statusText : "Error";
                                if (content === "Error") {
                                    toastr["error"](resource.exception.addError);
                                    return;
                                }
                                if (content === "Forbidden") {
                                    toastr["error"](resource.exception.addForbidden);
                                    return;
                                }
                            }).always(function () {
                                $btnSave.prop("disabled", false);
                                manuallyDestroyToastr();
                            });
                        } else {
                            window.gotoErrorModal();
                        }
                    },
                    onBeforeOpen: function () {
                        var persianCalendar;
                        $('form').validateBootstrap(true);
                        window.inputmasks();
                        $(".dialog-body select").selectpicker({
                            container: "body"
                        });
                        persianCalendar = $.calendars.instance('persian', 'fa');
                        $(".shamsi").calendarsPicker({
                            calendar: persianCalendar
                        }, $.calendarsPicker.regionalOptions['fa']);

                        imageFiles = $("input[type=file].imageFile");
                        _.each(imageFiles, function (imageFile, index) {
                            var fileName, imagePreview, imageThumbnails, _ref;
                            $(imageFile).fileinput({
                                language: "fa",
                                showUpload: false,
                                uploadAsync: true,
                                allowedFileExtensions: ["jpg", "png", "pdf", "xlsx", "docx"],
                                fileActionSettings: {
                                    showDrag: false
                                }
                            });
                            fileName = $("#" + ((_ref = $(imageFile).data('fileName')) != null ? _ref : 'FileName')).val();
                            if (fileName === "undefined" || fileName === void 0 || fileName === "") {
                                fileName = [];
                            }
                            if (fileName.length > 0) {
                                imagePreview = $("" + ($(imageFile).data('previewTarget')));
                                imageThumbnails = imagePreview.find(".file-preview-thumbnails");
                                imagePreview.removeClass("hidden");
                                imageThumbnails.append("<div class='file-preview-frame krajee-default kv-preview-thumb' data-fileindex='" + index + "' data-template='image'> <div class='kv-file-content'> <img src='" + ($(imageFile).data('url')) + "/" + fileName + "' class='kv-preview-data file-preview-image' style='width:auto;height:160px;' /> </div> <div> <div class='file-footer-buttons'> <button type='button' data-id='" + fileName + "' class='kv-file-remove btn btn-xs btn-default'><i class='glyphicon glyphicon-trash text-danger'></i></button> </div> <div class='clearfix'></div> </div> </div>");
                                $(document).off("click", "" + ($(imageFile).data('previewTarget')) + " .close.fileinput-remove");
                                $(document).on("click", "" + ($(imageFile).data('previewTarget')) + " .close.fileinput-remove", function () {
                                    bootbox.confirm("آیا واقعا میخواهید همه فایل ها را حذف کنید؟", function (result) {
                                        var _ref1;
                                        if (result === true) {
                                            $("#" + ((_ref1 = $(imageFile).data('fileName')) != null ? _ref1 : 'FileName')).val("");
                                            imageThumbnails.empty();
                                            return imagePreview.addClass("hidden");
                                        }
                                    });
                                });
                                $(document).off("click", "" + ($(imageFile).data('previewTarget')) + " .kv-file-remove");
                                return $(document).on("click", "" + ($(imageFile).data('previewTarget')) + " .kv-file-remove", function () {
                                    var $this, id;
                                    $this = $(this);
                                    id = $this.attr("data-id");
                                    bootbox.confirm("آیا واقعا میخواهید این فایل را حذف کنید؟", function (result) {
                                        var _ref1, _ref2;
                                        if (result === true) {
                                            $("#" + ((_ref1 = $(imageFile).data('fileName')) != null ? _ref1 : 'FileName')).val("");
                                            $this.closest(".file-preview-frame").remove();
                                            if (((_ref2 = imageThumbnails.find(".file-preview-frame")) != null ? _ref2.length : void 0) === 0) {
                                                return imagePreview.addClass("hidden");
                                            }
                                        }
                                    });
                                });
                            }
                        });

                        _.each($(".dialog-body .tree"), function (item, index) {
                            $("#" + item.id).jstree({
                                'core': {
                                    'data': {
                                        type: "POST",
                                        "url": $(item).attr("data_url"),
                                        "data": function (node) {
                                            return {
                                                "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val()
                                            };
                                        }
                                    }
                                },
                                "checkbox": {
                                    keep_selected_style: true,
                                    three_state: true, // to avoid that fact that checking a node also check others
                                    tie_selection: true // for checking without selecting and selecting without checking
                                },
                                "plugins": [$(item).attr("data_plugins")]
                            });

                            $("#" + item.id).on("check_node.jstree uncheck_node.jstree",
                                function (e, data) {
                                    var selectedElmsIds = [];
                                    var selectedElms = $("#" + item.id).jstree("get_checked", true);
                                    $.each(selectedElms, function () {
                                        selectedElmsIds.push(parseInt(this.id));
                                    });
                                    var listName = ((_ref = $(item).attr("data_list")) != null ? _ref : 'list');
                                    $("#" + listName).val(selectedElmsIds);
                                });
                        });

                        _.each($(".dialog-body select.shortcut"), function (item, index) {
                            var wrapper;
                            if ($(item).closest(".input-group").length > 0) {
                                return;
                            }
                            wrapper = $("<div class='input-group ig_" + index + "'/>");
                            $(item).parent().wrap(wrapper);
                            wrapper = $(".dialog-body .ig_" + index);
                            if ($(item).data("refreshUrl") != null) {
                                wrapper.append("<span class='input-group-btn'> <button class='btn btn-default refresh' type='button' style=' border: 2px solid #E020FF; border-radius: 7px; background: transparent; color: #E020FF;' data-url='" + ($(item).data('refreshUrl')) + "' data-parent='" + ($(item).data('parent')) + "'><i class='glyphicon glyphicon-refresh icon-refresh'></i></button> </span>");
                            }
                            if ($(item).data("newUrl") != null) {
                                wrapper.append("<span class='input-group-btn'> <a href='javascript:void(0)' data-dialog-title='" + ($(item).data('dialogTitle')) + "' data-url='" + ($(item).data('newUrl')) + "' class='btn btn-default btn-shortcut createItem'><i class='material-icons'>add</i></a> </span>");
                            }
                        });
                        $('table[data-toggle=table2]').bootstrapTable();
                        $('table[data-toggle=table3]').bootstrapTable();
                        $('table[data-toggle=table4]').bootstrapTable();
                        $('table[data-toggle=table5]').bootstrapTable();
                        $('table[data-toggle=table6]').bootstrapTable();

                    }
                });
            }, 700);
            content = data;
        }).fail(function (msg) {
            content = msg.status === 403 ? "Forbidden" : "Error";
        }).always(function () {
            if (content === "Error") {
                toastr["error"](resource.exception.addError);
                return;
            }
            if (content === "Forbidden") {
                toastr["error"](resource.exception.addForbidden);
                return;
            }
        });
        return false;
    });

    $(document).on("click", "#toolbar .btn.editItem[data-url]", function (e) {
        var $editItem, content, ids, params, url, _ref;
        e.preventDefault();
        $editItem = $(this);
        ids = window.getIdSelections();
        autoDestroyToastr();
        if ((ids != null ? ids.length : void 0) === 0) {
            toastr["warning"](resource.message.notSelected);
            return false;
        }
        $.fn.dialog.defaults = $.extend({}, $.fn.dialog.defaults, {
            saveBtnLabel: "ذخیره",
            cancelBtnLabel: "انصراف",
            closeLabel: resource.dialog.close
        });
        content = "";
        $editItem.tooltip("hide");
        url = $editItem.data("url") + "?id=" + ids[0];
        if ((params != null) && _.isArray(params)) {
            _.each(params, function (item) {
                _.each(_.keys(item), function (key) {
                    url = window.addQueryStringParm(url, key, item[key]);
                });
            });
        } else if ((params != null) && _.isObject(params)) {
            _.each(_.keys(params), function (key) {
                url = window.addQueryStringParm(url, key, params[key]);
            });
        }
        $.ajax({
            url: url,
            type: "GET",
            cache: false
        }).done(function (data, textStatus, jqXHR) {

            var _ref1;
            if ((data != null ? data.length : void 0) === 0) {
                toastr["error"]((_ref1 = data.message) != null ? _ref1 : resource.exception.editError);
                return;
            }

            content = data;
            setTimeout(function () {
                var name, title, _ref1, _ref2;
                name = new Date().getTime();
                title = $("<div class='t" + name + "'/>").html($editItem.html());
                $("body").append(title);
                $(".t" + name + " .material-icons, .t" + name + " .glyphicon").remove();
                title = title.text().trim();
                $(".t" + name).remove();
                $editItem.dialog({
                    title: (_ref1 = $editItem.data("dialogTitle")) != null ? _ref1 : title + " " + window.document.title.replace("لیست ", ""),
                    mode: (_ref2 = $editItem.data("dialogMode")) != null ? _ref2 : "large",
                    destroyAfterClose: true,
                    content: content,
                    onSaveClick: function (e) {
                        var $btnSave, form;
                        $btnSave = $(e);
                        form = $btnSave.parent().prev().find("form");
                        if (form.valid()) {
                            $btnSave.prop("disabled", true);
                            $.ajax({
                                url: form.attr("action"),
                                method: "POST",
                                data: new FormData(form.get(0)),
                                processData: false,
                                contentType: false,
                                cache: false
                            }).done(function (data, textStatus, jqXHR) {

                                var _ref3;
                                autoDestroyToastr();

                                if (data.resultStatus !== "Successful") {
                                    toastr["error"]((_ref3 = data.message) != null ? _ref3 : resource.exception.saveError);
                                    return;
                                }
                                toastr["success"](resource.message.saveSuccess);
                                $editItem.data("dialog").hide();
                                window.$table.bootstrapTable("refresh", {
                                    silent: true,
                                    pageNumber: 1
                                });

                            }).fail(function (msg) {
                                autoDestroyToastr();
                                content = msg.status === 403 ? msg.statusText : "Error";
                                if (content === "Error") {
                                    toastr["error"](resource.exception.editError);
                                    return;
                                }
                                if (content === "Forbidden") {
                                    toastr["error"](resource.exception.editForbidden);
                                    return;
                                }
                            }).always(function () {
                                $btnSave.prop("disabled", false);
                                manuallyDestroyToastr();

                            });
                        } else {
                            window.gotoErrorModal();
                        }
                    },
                    onBeforeOpen: function () {
                        var persianCalendar;
                        $('form').validateBootstrap(true);
                        window.inputmasks();
                        $(".dialog-body select").selectpicker({
                            container: "body"
                        });
                        persianCalendar = $.calendars.instance('persian', 'fa');
                        $(".shamsi").calendarsPicker({
                            calendar: persianCalendar
                        }, $.calendarsPicker.regionalOptions['fa']);

                        imageFiles = $("input[type=file].imageFile");
                        _.each(imageFiles, function (imageFile, index) {
                            var fileName, imagePreview, imageThumbnails, _ref;
                            $(imageFile).fileinput({
                                language: "fa",
                                showUpload: false,
                                uploadAsync: true,
                                allowedFileExtensions: ["jpg", "png", "pdf", "xlsx", "docx"],
                                fileActionSettings: {
                                    showDrag: false
                                }
                            });
                            fileName = $("#" + ((_ref = $(imageFile).data('fileName')) != null ? _ref : 'FileName')).val();
                            if (fileName === "undefined" || fileName === void 0 || fileName === "") {
                                fileName = [];
                            }
                            if (fileName.length > 0) {
                                imagePreview = $("" + ($(imageFile).data('previewTarget')));
                                imageThumbnails = imagePreview.find(".file-preview-thumbnails");
                                imagePreview.removeClass("hidden");
                                imageThumbnails.append("<div class='file-preview-frame krajee-default kv-preview-thumb' data-fileindex='" + index + "' data-template='image'> <div class='kv-file-content'> <img src='" + ($(imageFile).data('url')) + "/" + fileName + "' class='kv-preview-data file-preview-image' style='width:auto;height:160px;' /> </div> <div> <div class='file-footer-buttons'> <button type='button' data-id='" + fileName + "' class='kv-file-remove btn btn-xs btn-default'><i class='glyphicon glyphicon-trash text-danger'></i></button> </div> <div class='clearfix'></div> </div> </div>");
                                $(document).off("click", "" + ($(imageFile).data('previewTarget')) + " .close.fileinput-remove");
                                $(document).on("click", "" + ($(imageFile).data('previewTarget')) + " .close.fileinput-remove", function () {
                                    bootbox.confirm("آیا واقعا میخواهید همه فایل ها را حذف کنید؟", function (result) {
                                        var _ref1;
                                        if (result === true) {
                                            $("#" + ((_ref1 = $(imageFile).data('fileName')) != null ? _ref1 : 'FileName')).val("");
                                            imageThumbnails.empty();
                                            return imagePreview.addClass("hidden");
                                        }
                                    });
                                });
                                $(document).off("click", "" + ($(imageFile).data('previewTarget')) + " .kv-file-remove");
                                return $(document).on("click", "" + ($(imageFile).data('previewTarget')) + " .kv-file-remove", function () {
                                    var $this, id;
                                    $this = $(this);
                                    id = $this.attr("data-id");
                                    bootbox.confirm("آیا واقعا میخواهید این فایل را حذف کنید؟", function (result) {
                                        var _ref1, _ref2;
                                        if (result === true) {
                                            $("#" + ((_ref1 = $(imageFile).data('fileName')) != null ? _ref1 : 'FileName')).val("");
                                            $this.closest(".file-preview-frame").remove();
                                            if (((_ref2 = imageThumbnails.find(".file-preview-frame")) != null ? _ref2.length : void 0) === 0) {
                                                return imagePreview.addClass("hidden");
                                            }
                                        }
                                    });
                                });
                            }
                        });

                        _.each($(".dialog-body .tree"), function (item, index) {
                            $("#" + item.id).jstree({
                                'core': {
                                    'data': {
                                        type: "POST",
                                        "url": $(item).attr("data_url"),
                                        "data": function (node) {
                                            return {
                                                "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val()
                                            };
                                        }
                                    }
                                },
                                "checkbox": {
                                    keep_selected_style: true,
                                    three_state: true, // to avoid that fact that checking a node also check others
                                    tie_selection: true // for checking without selecting and selecting without checking
                                },
                                "plugins": [$(item).attr("data_plugins")]
                            });

                            $("#" + item.id).on("check_node.jstree uncheck_node.jstree",
                                function (e, data) {
                                    var selectedElmsIds = [];
                                    var selectedElms = $("#" + item.id).jstree("get_checked", true);
                                    $.each(selectedElms, function () {
                                        selectedElmsIds.push(parseInt(this.id));
                                    });
                                    var listName = ((_ref = $(item).attr("data_list")) != null ? _ref : 'list');
                                    $("#" + listName).val(selectedElmsIds);
                                });
                        });

                        _.each($(".dialog-body select.shortcut"), function (item, index) {
                            var wrapper;
                            if ($(item).closest(".input-group").length > 0) {
                                return;
                            }
                            wrapper = $("<div class='input-group ig_" + index + "'/>");
                            $(item).parent().wrap(wrapper);
                            wrapper = $(".dialog-body .ig_" + index);
                            if ($(item).data("refreshUrl") != null) {
                                wrapper.append("<span class='input-group-btn'> <button class='btn btn-default refresh' type='button' style=' border: 2px solid #E020FF; border-radius: 7px; background: transparent; color: #E020FF;' data-url='" + ($(item).data('refreshUrl')) + "' data-parent='" + ($(item).data('parent')) + "'><i class='glyphicon glyphicon-refresh icon-refresh'></i></button> </span>");
                            }
                            if ($(item).data("newUrl") != null) {
                                wrapper.append("<span class='input-group-btn'> <a href='javascript:void(0)' data-dialog-title='" + ($(item).data('dialogTitle')) + "' data-url='" + ($(item).data('newUrl')) + "' class='btn btn-default btn-shortcut createItem'><i class='material-icons'>add</i></a> </span>");
                            }
                        });
                        $('table[data-toggle=table2]').bootstrapTable();
                        $('table[data-toggle=table3]').bootstrapTable();
                        $('table[data-toggle=table4]').bootstrapTable();
                        $('table[data-toggle=table5]').bootstrapTable();
                        $('table[data-toggle=table6]').bootstrapTable();

                    }
                });
            }, 700);
        }).fail(function (msg) {
            content = msg.statusText;
            if (msg.status === 403) {
                toastr["error"](resource.exception.editForbidden);
                return;
            }
            if (content === "error") {
                toastr["error"](resource.exception.editError);
                return;
            }
        }).always(function () {
            if (content === "Error") {
                toastr["error"](resource.exception.editError);
                return;
            }
            if (content === "Forbidden") {
                toastr["error"](resource.exception.editForbidden);
                return;
            }
        });
        return false;
    });

    $(document).on("click", "#toolbar .btn.btn-danger.removeItem[data-url]", function () {
        var $removeItem, deleteDialog, ids;
        $removeItem = $(this);
        ids = window.getIdSelections();
        autoDestroyToastr();
        if ((ids != null ? ids.length : void 0) === 0) {
            toastr["warning"](resource.message.notSelected);
            return false;
        }
        deleteDialog = bootbox.confirm(resource.message.deleteQuestion(ids.length), function (result) {
            if (result === true) {
                $.ajax({
                    url: $removeItem.data("url"),
                    type: "POST",
                    cache: false,
                    data: {
                        id: ids,
                        "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val()
                    }
                }).done(function (data, textStatus, jqXHR) {

                    var idField, tableOptions, _ref;
                    if (data.resultStatus !== "Successful") {
                        toastr["error"]((_ref = data.message) != null ? _ref : resource.exception.deleteError);
                        return;
                    }
                    toastr["success"](resource.message.deleteSuccess);
                    tableOptions = window.$table.bootstrapTable('getOptions');
                    idField = tableOptions.idField;
                    window.$table.bootstrapTable('remove', {
                        field: idField,
                        values: ids
                    });
                    window.$table.bootstrapTable('refresh', {
                        silent: true,
                        pageNumber: 1
                    });

                }).fail(function (msg) {
                    toastr["error"](msg.status === 403 ? resource.exception.deleteForbidden : resource.exception.deleteError);
                }).always(function () { });
            }
        });
        deleteDialog.init(function () {
            deleteDialog.find(".btn").addClass("btn-raised");
        });
        return false;
    });

    var autoDestroyToastr, manuallyDestroyToastr;

    autoDestroyToastr = function (tapToDismiss) {
        toastr.options.tapToDismiss = tapToDismiss === void 0 ? true : tapToDismiss;
        toastr.options.preventDuplicates = false;
        toastr.options.closeButton = false;
        toastr.options.timeOut = "5000";
        return toastr.options.extendedTimeOut = "1000";
    };

    manuallyDestroyToastr = function (tapToDismiss) {
        toastr.options.tapToDismiss = tapToDismiss === void 0 ? true : tapToDismiss;
        toastr.options.preventDuplicates = false;
        toastr.options.closeButton = true;
        toastr.options.timeOut = "0";
        return toastr.options.extendedTimeOut = "0";
    };

    window.responseHandler = function (res) {
        var idField, pageNumber, pageSize, tableOptions;
        tableOptions = window.$table.bootstrapTable('getOptions');
        idField = tableOptions.idField;
        pageNumber = tableOptions.pageNumber - 1;
        pageSize = tableOptions.pageSize;
        $.each(res.data, function (i, row) {
            row.state = $.inArray(row[idField], selections) !== -1;
            row.rowNumber = (pageNumber * pageSize) + (1 + i);
        });
        return res;
    };

    window.ajaxRequest = function (params) {
        var additionalParams;
        params.type = "post";
        params.data.__RequestVerificationToken = $("input[name=__RequestVerificationToken]").val();
        params.url = window.$table.data("url");
        params.contentType = "application/x-www-form-urlencoded; charset=UTF-8";
        additionalParams = window.$table.data("additionalParams");
        if (additionalParams != null) {
            params.data = $.extend({}, window.execFunc(additionalParams, window), params.data);
        }
        if (window.dataParams != null) {
            params.data = $.extend({}, window.dataParams(), params.data);
        }
        setTimeout(function () {
            $.ajax(params).done(function (data, textStatus, jqXHR) {

                var objects, _ref;
                autoDestroyToastr();
                if (data.resultStatus !== 1 && data.resultStatus !== -2) {
                    toastr["error"]((_ref = data.message) != null ? _ref : resource.exception.loadError);
                    return;
                }
                objects = {
                    total: data.total,
                    rows: data.data
                };
                window.$table.bootstrapTable('load', objects);
            }).fail(function (msg) {
                toastr["error"](msg.status === 403 ? resource.exception.forbidden : resource.exception.serverError);
            }).always(function () { });
        }, 313);
    };

    setTimeout(function () {
        window.$table.bootstrapTable('resetView');
        $("[title]").tooltip({
            placement: "bottom",
            html: true
        });


        window.$table.on('load-success.bs.table', function () {
            setTimeout(function () {
                if ($('tbody tr.selected').length)
                    $('tbody tr.selected')[0].scrollIntoView()

            }, 100)
            setTimeout(function () {
                $('td.zero-dash').each(function () {
                    if ($(this).text().trim() == '0') {
                        $(this).text('-')
                    }
                })
                if ($('tbody tr.selected').length)
                    $('tbody tr.selected')[0].scrollIntoView()



                if ($('.detail-icon') && $('.detail-icon').length) {
                    $('.detail-icon').on('click', function () {
                        setTimeout(function () {
                            if ($('.detail-view') && $('.detail-view').length) {
                                $('.detail-view').each(function (index) {
                                    $(this).find('div:first').css('width', $('.fixed-table-body').width() - 30 + 'px').css('overflow', 'auto')
                                })
                            }
                        }, 400)

                    })
                }


                //$('table th').each(function (index) {
                //    var rect = $(this)[0].getBoundingClientRect();
                //    var width;
                //    if (rect.width) {
                //        // `width` is available for IE9+
                //        width = rect.width;
                //    } else {
                //        // Calculate width for IE8 and below
                //        width = rect.right - rect.left;
                //    }
                //    $(this).addClass('th-index-' + index)
                //    $('table td:eq(' + index + ')').css('min-width', width + 'px').css('max-width', width + 'px').css('width', width + 'px')
                //    $('table th:eq(' + index + ')').css('min-width', width + 'px').css('max-width', width + 'px').css('width', width + 'px')

                //})
            }, 400)


        });

        window.$table.on('check.bs.table uncheck.bs.table ' + 'check-all.bs.table uncheck-all.bs.table', function () {
            selections = window.getIdSelections();
        });

        window.$table.on('post-header.bs.table', function () {
            var container;
            if ($(".fixed-table-body table[data-toggle='table']").height() >= $(".fixed-table-body").height()) {
                $(".fixed-table-header").attr("style", "margin-left:" + (window.getScrollBarWidth()) + "px !important");
            } else {
                $(".fixed-table-header").attr("style", "margin-left:0px !important");
            }
            container = $(this).closest(".fixed-table-container");
            if (container.prev().hasClass("fixed-table-toolbar")) {
                $(".filter-row").detach().insertBefore(container);
            }
        });

        window.$table.on('expand-row.bs.table', function (e, index, row, $detail) {

            var id;
            if ($(".fixed-table-body table[data-toggle='table']").height() >= $(".fixed-table-body").height()) {
                $(".fixed-table-header").attr("style", "margin-left:" + (window.getScrollBarWidth()) + "px !important");
            } else {
                $(".fixed-table-header").attr("style", "margin-left:0px !important");
            }
            id = row[$(e.target).bootstrapTable('getOptions').idField];
            $.when(window.execFunc($(e.target).data("detail"), window, id, row)).then(function (result) {
                $detail.html("").append(result);
            });
        });
    }, 100);

}).call(this);